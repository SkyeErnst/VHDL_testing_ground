library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GenericRegister is

    generic (n : positive);                                     -- size of register

    port 
    (
        i_clk           : in std_logic := '0';                  -- clock
        i_n_pre         : in std_logic := '1';                  -- async active low preset 
        i_n_clr         : in std_logic := '1';                  -- async active low clearclear
        i_clock_inhibit : in std_logic := '1';                  -- async active low clock inhibiter (inhibits on a 0)
        i_mode          : in std_logic := '0';                  -- behavior mode for register. 0 = read, 1 = write
        i_data          : in std_logic_vector (n-1 downto 0);   -- data in

        o_q             : out std_logic_vector(n-1 downto 0);   -- data out port, obeys OE
        o_n_q           : out std_logic_vector(n-1 downto 0);   -- data out inverted, obeys OE
        o_q_direct      : out std_logic_vector(n-1 downto 0)    -- data out port, DOES NOT OBEY OE, will always output
    );
end GenericRegister;

architecture rtl of GenericRegister is


    signal s_q : std_logic_vector (n-1 downto 0);               -- temporary value

begin

    o_q <= s_q;
    
   p_on_clock: process(i_clk, i_n_clr, i_n_pre)
   begin
       if i_n_clr = '0' then                                    -- Clear if clear is low
           s_q <= others => '0';

        elsif i_n_pre = '0' then                                -- preset if preset is low
            s_q <= others => '1';

        else                                                    
            if (rising_edge(i_clk) AND i_clock_inhibit = '1') then -- Otherwise, check for rising clock edge and inactive clock inhibit
                

            end if;
        end if;
   end process p_on_clock;

end rtl;